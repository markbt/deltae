var searchIndex = JSON.parse('{\
"deltae":{"doc":"Calculate Delta E (color difference) between two colors in …","t":[13,13,13,13,13,17,17,4,8,3,8,8,14,11,11,11,11,11,11,11,11,0,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,12,12,13,3,3,13,4,3,12,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,8,8,11,10],"n":["DE1976","DE1994G","DE1994T","DE2000","DECMC","DECMC1","DECMC2","DEMethod","Delta","DeltaE","Round","Validate","assert_delta_eq","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","color","default","delta","delta","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from_str","into","into","method","ne","new","partial_cmp","reference","round_to","round_to","sample","to_owned","to_owned","to_string","to_string","tolerance","try_from","try_from","try_into","try_into","type_id","type_id","validate","value","with_method","0","1","BadFormat","LabValue","LchValue","OutOfBounds","ValueError","XyzValue","a","b","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c","clone","clone","clone","clone_into","clone_into","clone_into","default","default","default","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","from_str","from_str","h","hue_radians","into","into","into","into","l","l","ne","ne","ne","new","new","new","round_to","round_to","round_to","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","validate","validate","validate","x","y","z","DeltaEq","Tolerance","delta_eq","tolerance"],"q":["deltae","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","deltae::DEMethod","","deltae::color","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","deltae::eq","","",""],"d":["The original DeltaE implementation, a basic euclidian …","CIE94 DeltaE implementation, weighted with a tolerance for …","CIE94 DeltaE implementation, weighted with a tolerance for …","The default DeltaE method","An implementation of DeltaE with separate tolerances for …","DeltaE CMC (1:1)","DeltaE CMC (2:1)","The most common DeltaE methods","Trait to determine color difference between various types. …","The measured difference between two colors","Trait for rounding values to a number of decimal places","Trait to validate whether a type has appropriate values","Convenience macro for asserting two values are equivalent …","","","","","","","","","Manipulate and convert CIE L*a*b* and Lch colors.","","Calculate DeltaE between 2 types","Calculate DeltaE between 2 types","<code>Tolerance</code> and <code>DeltaEq</code> traits","","","","","","","","","","","","","Return a reference to the <code>DeltaE</code> method used in the …","","New <code>DeltaE</code> from two colors and a <code>DEMethod</code>.","","Return a reference to the reference <code>LabValue</code> used in the …","Rounds the value to a number of decimal places","","Return a reference to the sample <code>LabValue</code> used in the …","","","","","","","","","","","","Return <code>Err()</code> if the values are invalid","Return a reference to the <code>DeltaE</code> value","Recalculate <code>DeltaE</code> with another <code>DEMethod</code>","Lightness tolerance","Chroma tolerance","The value is formatted incorrectly","CIEL*a*b*","Lch: Luminance, Chroma, Hue","The value is outside the acceptable range","Value validation Error type","CIE 1931 XYZ","Green - Magenta","Blue - Yellow","","","","","","","","","Chroma","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Hue (in degrees)","Returns the Hue as radians rather than degrees","","","","","Lightness","Lightness","","","","Returns a result of a LabValue from 3 <code>f32</code>s. Will return …","Returns a result of an LchValue from 3 <code>f32</code>s. Will return …","Returns a result of an XyzValue from 3 <code>f32</code>s. Will return …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","X Value","Y Value","Z Value","Trait to determine whether two values are within a certain …","Trait to define a tolerance value for the <code>DeltaEq</code> trait","Return true if the value is less than or equal to the …","Return a tolerance value"],"i":[1,1,1,1,1,0,0,0,0,0,0,0,0,2,1,2,1,2,1,2,1,0,1,3,3,0,2,2,1,2,2,1,1,2,1,1,2,1,2,1,2,2,2,4,2,2,2,1,2,1,2,2,1,2,1,2,1,5,2,2,6,6,7,0,0,7,0,0,8,8,8,9,10,7,8,9,10,7,9,8,9,10,8,9,10,8,9,10,8,9,10,8,8,9,9,10,10,7,7,8,8,8,8,8,8,9,9,9,9,9,10,10,10,10,10,7,8,9,10,9,9,8,9,10,7,8,9,8,9,10,8,9,10,8,9,10,8,9,10,8,9,10,7,8,8,8,8,9,9,9,9,10,10,10,10,7,8,9,10,7,8,9,10,7,8,9,10,10,10,10,0,0,11,12],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["deltae",3]],[[],["demethod",4]],[[]],[[]],null,[[],["demethod",4]],[[["demethod",4],["into",8,["labvalue"]],["labvalue",3]],["deltae",3]],[[["demethod",4],["into",8,["labvalue"]],["labvalue",3]],["deltae",3]],null,[[["f32",15]],["bool",15]],[[],["bool",15]],[[["demethod",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["str",15]],[["result",4,["demethod"]],["demethod",4]]],[[]],[[]],[[],["demethod",4]],[[["demethod",4]],["bool",15]],[[["demethod",4]],["deltae",3]],[[],[["option",4,["ordering"]],["ordering",4]]],[[],["labvalue",3]],[[["i32",15]]],[[["i32",15]]],[[],["labvalue",3]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["f32",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],[["valueerror",4],["result",4,["valueerror"]]]],[[],["f32",15]],[[["demethod",4]]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["labvalue",3]],[[],["lchvalue",3]],[[],["xyzvalue",3]],[[]],[[]],[[]],[[],["labvalue",3]],[[],["lchvalue",3]],[[],["xyzvalue",3]],[[["labvalue",3]],["bool",15]],[[["lchvalue",3]],["bool",15]],[[["xyzvalue",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["xyzvalue",3]],["labvalue",3]],[[["xyzvalue",3]],["labvalue",3]],[[["labvalue",3]],["labvalue",3]],[[["lchvalue",3]],["labvalue",3]],[[["lchvalue",3]],["labvalue",3]],[[]],[[["xyzvalue",3]],["lchvalue",3]],[[["xyzvalue",3]],["lchvalue",3]],[[["labvalue",3]],["lchvalue",3]],[[["labvalue",3]],["lchvalue",3]],[[]],[[["lchvalue",3]],["xyzvalue",3]],[[["lchvalue",3]],["xyzvalue",3]],[[["labvalue",3]],["xyzvalue",3]],[[["labvalue",3]],["xyzvalue",3]],[[]],[[]],[[["str",15]],[["valueerror",4],["result",4,["labvalue","valueerror"]],["labvalue",3]]],[[["str",15]],[["valueerror",4],["lchvalue",3],["result",4,["lchvalue","valueerror"]]]],[[["str",15]],[["valueerror",4],["result",4,["xyzvalue","valueerror"]],["xyzvalue",3]]],null,[[],["f32",15]],[[]],[[]],[[]],[[]],null,null,[[["labvalue",3]],["bool",15]],[[["lchvalue",3]],["bool",15]],[[["xyzvalue",3]],["bool",15]],[[["f32",15]],[["valueerror",4],["result",4,["labvalue","valueerror"]],["labvalue",3]]],[[["f32",15]],[["valueerror",4],["lchvalue",3],["result",4,["lchvalue","valueerror"]]]],[[["f32",15]],[["valueerror",4],["result",4,["xyzvalue","valueerror"]],["xyzvalue",3]]],[[["i32",15]],["labvalue",3]],[[["i32",15]],["lchvalue",3]],[[["i32",15]],["xyzvalue",3]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],[["valueerror",4],["result",4,["labvalue","valueerror"]],["labvalue",3]]],[[],["result",4]],[[],[["valueerror",4],["result",4,["labvalue","valueerror"]],["labvalue",3]]],[[],[["valueerror",4],["result",4,["labvalue","valueerror"]],["labvalue",3]]],[[],[["valueerror",4],["lchvalue",3],["result",4,["lchvalue","valueerror"]]]],[[],[["valueerror",4],["lchvalue",3],["result",4,["lchvalue","valueerror"]]]],[[],[["valueerror",4],["lchvalue",3],["result",4,["lchvalue","valueerror"]]]],[[],["result",4]],[[],[["valueerror",4],["result",4,["xyzvalue","valueerror"]],["xyzvalue",3]]],[[],[["valueerror",4],["result",4,["xyzvalue","valueerror"]],["xyzvalue",3]]],[[],[["valueerror",4],["result",4,["xyzvalue","valueerror"]],["xyzvalue",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],[["valueerror",4],["result",4,["valueerror"]]]],[[],[["valueerror",4],["result",4,["valueerror"]]]],[[],[["valueerror",4],["result",4,["valueerror"]]]],null,null,null,null,null,[[["demethod",4],["tolerance",8]],["bool",15]],[[],["f32",15]]],"p":[[4,"DEMethod"],[3,"DeltaE"],[8,"Delta"],[8,"Round"],[8,"Validate"],[13,"DECMC"],[4,"ValueError"],[3,"LabValue"],[3,"LchValue"],[3,"XyzValue"],[8,"DeltaEq"],[8,"Tolerance"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};